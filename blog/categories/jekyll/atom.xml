<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jekyll | 程序猎人的博客]]></title>
  <link href="http://programus.github.com/blog/categories/jekyll/atom.xml" rel="self"/>
  <link href="http://programus.github.com/"/>
  <updated>2012-03-08T21:52:43+09:00</updated>
  <id>http://programus.github.com/</id>
  <author>
    <name><![CDATA[程序猎人]]></name>
    <email><![CDATA[programus@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为Octopress追加数据表格的CSS]]></title>
    <link href="http://programus.github.com/blog/2012/03/07/add-table-data-css-for-octopress/"/>
    <updated>2012-03-07T21:56:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/07/add-table-data-css-for-octopress</id>
    <content type="html"><![CDATA[<p>昨天恢复了一个<a href="{%%20post_url%202010-11-15-tiny-countdown%20%}">旧博客</a>，里面包含了一个数据表格。</p>

<p>但[Octopress][]的默认表格是不具有边框的，在看数据表格时会很难看。</p>

<p>于是，对[Octopress][]做了一番剖析，追加了针对数据表格的CSS格式，并允许在博客的内容文件中选择是否使用数据表格。</p>

<!--more-->


<p>要做到这一点，首先得先找到原始CSS的所在，在Firefox中[Firebug][]的帮助下，很顺利地找到了位于<code>source/stylesheets</code>的<code>screen.css</code>文件。</p>

<p>打开一看，傻眼了。居然是紧凑型CSS，都堆在一起了。于是上网找了个CSS格式化工具——<a href="http://www.cssportal.com/online-css-editor/">http://www.cssportal.com/online-css-editor/</a>。</p>

<p>当CSS格式化后，查看了一下里面对<code>table</code>、<code>th</code>、<code>td</code>的格式定义。发现确实将<code>border-width</code>设置成了<code>0</code>。</p>

<p>看来只有覆盖它们了。于是写了一个<code>data-table.css</code>，同样放在<code>source/stylesheets</code>下面。</p>

<p>{% gist 1993032 data-table.css %}</p>

<p>然后找到引入<code>screen.css</code>的文件，在其后引入<code>data-table.css</code>。这个文件是<code>source/_includes/head.html</code>。但为了保证没有数据表格的博客还能继续使用原本的表格风格，在里面加了少许条件。</p>

<p>{% gist 1993032 head.html %}</p>

<p>这样，只要在博客文件的<a href="https://github.com/mojombo/jekyll/wiki/yaml-front-matter"><code>yaml front matter</code></a>部分里面加入<code>styles: [data-table]</code>，就可以让数据表格用的表格风格生效了。</p>

<p>要在博客里插入表格，则可以使用如下格式。</p>

<p>```
左对齐表头 | 中间对齐表头 | 右对齐表头
:----------|:------------:|----------:
左对齐数据 |中间对齐数据  |右对齐数据
第二行数据 |也是第二行    |还是第二行
懒得写了...|.....         |.....
长数据，以便看出表头的对齐|长数据，以便看出表头的对齐|长数据，以便看出表头的对齐</p>

<p>```
就会得到如下表格：</p>

<table>
<thead>
<tr>
<th align="left">左对齐表头 </th>
<th align="center"> 中间对齐表头 </th>
<th align="right"> 右对齐表头</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">左对齐数据 </td>
<td align="center">中间对齐数据  </td>
<td align="right">右对齐数据</td>
</tr>
<tr>
<td align="left">第二行数据 </td>
<td align="center">也是第二行    </td>
<td align="right">还是第二行</td>
</tr>
<tr>
<td align="left">懒得写了...</td>
<td align="center">.....         </td>
<td align="right">.....</td>
</tr>
<tr>
<td align="left">长数据，以便看出表头的对齐</td>
<td align="center">长数据，以便看出表头的对齐</td>
<td align="right">长数据，以便看出表头的对齐</td>
</tr>
</tbody>
</table>


<p>其中的左右对齐，取决于表头下面一行中的冒号的位置。</p>

<p>{% include links %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress追加[分享到微博]按钮]]></title>
    <link href="http://programus.github.com/blog/2012/03/04/share-weibo-button/"/>
    <updated>2012-03-04T20:11:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/04/share-weibo-button</id>
    <content type="html"><![CDATA[<p>昨天加上了[微博][]的侧边栏。今天发现每篇微博下面还有一个<code>Tweet</code>按钮。还是那句话，在[墙][]后面，[Twitter][]用不到，所以[微博][]的分享按钮不可缺少。</p>

<!--more-->


<p>有了昨天的经验，今天也就没去网上查什么资料。直接去[新浪微博][]找到<a href="http://open.weibo.com/sharebutton" title="新浪微博分享按钮">分享按钮</a>的页面，生成一个按钮代码。</p>

<p>{% gist 1972564 %}</p>

<p>仔细看看生成的按钮，虽然上面写了一大堆JavaScript，但实际有用的就是最后一行<code>document.write('...')</code>里面的HTML代码。但这里HTML的主要部分都是用JavaScript生成的。于是祭出网页分析神器——[Firebug][]，直接分析<a href="http://open.weibo.com/sharebutton" title="新浪微博分享按钮">分享按钮</a>页面里例子的HTML代码。从中提取出如下URL（为了便于阅读，格式做了调整）——</p>

<p><code>
http://hits.sinajs.cn/A1/weiboshare.html?
  url=http%3A%2F%2Fopen.weibo.com%2Fsharebutton&amp;
  appkey=&amp;
  type=6&amp;
  ralateUid=1098907490&amp;
  language=zh_cn
</code></p>

<p>其中各个参数的意思，参看生成的JavaScript的注释，基本一目了然了。下一步，嵌入代码到博客下面的分享栏里。</p>

<p>经过一番查找，分享栏的代码存储在<code>source/_includes/post/sharing.html</code>中。果断加入代码：</p>

<p>{% gist 1972657 sharing.html %}</p>

<p>其中最后一行是自己调整了一下看着顺眼的格式。</p>

<p>同时要在<code>_config.yml</code>文件中加入<code>weibo_share</code>的设定。</p>

<p>{% gist 1972657 _config.yml %}</p>

<p>最后，为了更换主题时不会出问题，对<code>.theme/&lt;所用的主题名&gt;/source/_includes/post/sharing.html</code>也做了相应的修改。</p>

<p>最后，生成网页、启动服务器测试——</p>

<p><code>
rake generate
rake preview
</code></p>

<p>查看预览网页<a href="http://localhost:4000">http://localhost:4000</a>……<strong>按钮加入成功</strong>！</p>

<p>{% include links %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress博客追加新浪微博侧栏]]></title>
    <link href="http://programus.github.com/blog/2012/03/03/add-weibo-sidebar-into-octopress/"/>
    <updated>2012-03-03T21:43:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/03/add-weibo-sidebar-into-octopress</id>
    <content type="html"><![CDATA[<p>配置好了基于Octopress的博客后，发现其右侧边栏（位置自然根据主题会有不同）上有[Twitter][]等内容。因为[墙][]的原因，[Twitter][]始终使用起来不够方便，所以还是[新浪微博][]用的更多。于是，就想在博客里弄一个[微博][]的侧边栏。</p>

<!--more-->


<p>{% img left /images/posts/octopress-weibo.png  %}</p>

<h3>实现设想</h3>

<p>[微博][]本身提供了一个嵌入侧边栏的工具，叫<a href="http://weibo.com/tool/weiboshow" title="微博秀">微博秀</a>。于是便想是不是简单嵌入即可呢？</p>

<h3>其他尝试</h3>

<p>但对稍有点费劲的工作，当然首先是上网搜索一下是否有现成方案。果然找到了一篇文章——《<a href="http://blog.tingkun.com/blog/2011/11/05/xin-lang-wei-bo-ce-lan-widgetding-zhi-octopress/">新浪微博侧栏widget定制</a>》。</p>

<p>仔细查看了一下代码，发现作者好粗心，代码里居然没有用变量，而是把自己的用户名直接硬写进去了。另外，貌似只实现了<code>微博名片</code>和<code>关注按钮</code>。而且因为使用了[微博][]的JavaScript API，所以需要一个APP ID。</p>

<h3>回归</h3>

<p>我是懒人，不想搞得那么复杂。于是继续回到自己最初的方案——嵌入<a href="http://weibo.com/tool/weiboshow" title="微博秀">微博秀</a>。</p>

<p>先到<a href="http://weibo.com/tool/weiboshow" title="微博秀">微博秀</a>里面生成自己的微博秀嵌入代码。</p>

<p>```</p>

<iframe 
    width="100%" 
    height="550" 
    class="share_self"  
    frameborder="0" 
    scrolling="no" 
    src="http://widget.weibo.com/weiboshow/index.php?
        width=0&
        height=550&
        fansRow=1&
        ptype=1&
        speed=0&
        skin=2&
        isTitle=0&
        noborder=1&
        isWeibo=1&
        isFans=1&
        uid=1098907490&
        verifier=abd54ad9&
        dpc=1">
</iframe>


<p>```</p>

<p>仔细一看，其实就是一个大URL，尝试一下各种参数。最终写了一个<code>weibo.html</code>，放到了<code>source/_includes/asides</code>下面。貌似在<code>.theme/&lt;所用的主题名&gt;/source/_includes/asides</code>下面放着更好，因为切换主题时不会丢失。</p>

<p>{% gist 1966517 weibo.html %}</p>

<p>同时，在<code>_config.yml</code>中加入相关设定——</p>

<p>{% gist 1966517 _config.yml %}</p>

<p>其中的<code>weibo_uid</code>和<code>weibo_verifier</code>是从<a href="http://weibo.com/tool/weiboshow" title="微博秀">微博秀</a>生成的代码中取得的，其它则是显示设定。</p>

<p>至此，搞定了微博的嵌入。</p>

<p>{% include links %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇用Octopress生成的日志]]></title>
    <link href="http://programus.github.com/blog/2012/03/01/first-post-by-octopress/"/>
    <updated>2012-03-01T21:31:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/01/first-post-by-octopress</id>
    <content type="html"><![CDATA[<p>先是在知乎上发现了一个叫<a href="http://www.zhihu.com/people/lv-kun" title="吕坤的知乎主页">吕坤</a>的人，顺着简介发现了<a href="http://lvkun.github.com/" title="吕坤的github博客">他的博客</a>。然后了解到可以使用github来写博客，觉得很好玩，就打算试一试。</p>

<!--more-->


<p>我不像<a href="http://www.zhihu.com/people/lv-kun" title="吕坤的知乎主页">吕坤</a>对[Ruby][]那么大意见，所以装了运行Jekyll的一切必需品，现学[Git][]（这个早就听说了，一直没用到所以没学）、[Jekyll][]、[Markdown][]……折腾了一个星期天，终于可以显示博客了。正高兴呢，忽然发现服务器不正常了。</p>

<p>经过一番查找，发现是因为[Jekyll]运行时使用默认环境的地区编码信息，所以不识别UTF-8编码中的中文。从网上搜到Windows下可以使用<code>chcp</code>来改变语言编码，于是试了试<code>chcp 65001</code>，发现运行</p>

<pre><code>jekyll --pygments --safe --auto --server
</code></pre>

<p>之后没有任何显示。遂放弃。</p>

<p>继续查，发现哪怕在Windows下，只要设置<code>LANG</code>和<code>LC_ALL</code>后，便可以设置的编码运行。于是</p>

<p>{% gist 1972602 %}</p>

<p>然后再次运行<code>jekyll</code>，<strong>正常了！</strong></p>

<p>于是才有了此篇日志。</p>

<hr />

<p>本来用[Jekyll][]的日志已经做好了，但是发现无法从手机上正常浏览。又懒得去研究怎么调整HTML、CSS那一套东西。正一筹莫展之际，发现了[Octopress][]这个东西。于是毅然变节，改投[Octopress][]，于是有了现在的后半段。</p>

<p>[Octopress][]比较有趣，会把代码放在<code>source</code>目录下，把生成的网站放在<code>_deploy</code>目录下。（当然所有目录都可以通过设置修改。）然后会自动将<code>_deploy</code>目录作为github page的<code>master</code>分支，将包含source在内的部分作为github page的<code>source</code>分支。</p>

<p>对[Git][]还不是特别了解，或许领会不到如此分离的真谛，但隐约能感觉到这样做会使Repository里的结构清晰很多。</p>

<p>{% include links %}</p>
]]></content>
  </entry>
  
</feed>
