<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: computer | 程序猎人的博客]]></title>
  <link href="http://programus.github.com/blog/categories/computer/atom.xml" rel="self"/>
  <link href="http://programus.github.com/"/>
  <updated>2012-03-25T19:47:04+09:00</updated>
  <id>http://programus.github.com/</id>
  <author>
    <name><![CDATA[程序猎人]]></name>
    <email><![CDATA[programus@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript游戏——Memory]]></title>
    <link href="http://programus.github.com/blog/2012/03/25/js-game-memory/"/>
    <updated>2012-03-25T17:47:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/25/js-game-memory</id>
    <content type="html"><![CDATA[<p>前段时间看了《JavaScript语言精粹》，一直想实践一下。于是利用了3、4天的时间做了一个记忆力游戏——<a href="http://programus.appinn.me/jsgames/memory-single.html">Memory</a>。</p>

<!--more-->


<p>先在这里放一个直接可玩的版本：</p>

<iframe id="memory-game" width="350" height="380" src="http://programus.appinn.me/jsgames/memory-single.html"></iframe>


<p>看书的时候随随便便就看过去了，实际做的时候才总是感到书到用时方恨少。书中提到的一些常见问题还真是很常见，在实际编写程序的过程中很多都碰上了。</p>

<p>游戏最终在网上发布时使用的文件——<a href="http://programus.appinn.me/jsgames/memory-single.html">memory-single.html</a>——是一个整合了所有内容的文件，直接转存到本地后，单独一个文件就可以展现整个游戏内容。甚至包括所有的声音和图片。</p>

<p>对于图片，使用了<a href="http://en.wikipedia.org/wiki/Data_URI_scheme">Data URI Schema</a>的技术，将图像的二进制内容转码成Base64编码，以文本形式写在html文件中。不过，本游戏中一共就用了两个图片：作为favicon的图标和下拉列表框的自定义箭头。</p>

<p>对于声音，使用了Pedro Ladaria做的<a href="http://www.codebase.es/riffwave/">代码生成声音的库</a>。我在[CSSer][]上放了一个<a href="http://www.csser.com/board/4f6ab5086e9e4f0817000066#/post/4f6ab6462af57d0a17000020/more">贴板</a>，里面贴了声音库的使用相关链接。</p>

<p>最后，说一下自定义风格的下拉列表框。参考了<a href="http://bavotasan.com/2011/style-select-box-using-only-css/">这篇文章</a>，使用外框的标签来切断<code>&lt;select&gt;</code>的内容，将右边的箭头排除到外框标签的外面并遮挡住。其中不同的是，我在这里使用的外框是<code>&lt;span&gt;</code>而不是<code>&lt;div&gt;</code>。最初使用<code>&lt;span&gt;</code>的时候，没有成功，后来在网上查询才知道只有<code>block</code>级的标签才有效，而<code>&lt;span&gt;</code>不是。但加上<code>display:inline-block</code>就可以如<code>block</code>级标签一般工作了。</p>

<p>说了这么多，最后附上代码。</p>

<div title="其实，我是个按钮" style="cursor:pointer;" onclick="if($('#source-block').css('display') === 'none') {$('#source-block').css('display', 'block');$('#show-hide').text('隐藏');}else{$('#source-block').css('display','none');$('#show-hide').text('显示');}">[<span id="show-hide">显示</span>代码部分]</div>




<div style="display:none;" id="source-block">
{% gist 2192639 %}
</div>


<p>{% include links %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在programus.appinn.me上放了两个软件]]></title>
    <link href="http://programus.github.com/blog/2012/03/14/put-two-softwares-onto-appinn-dot-me/"/>
    <updated>2012-03-14T22:57:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/14/put-two-softwares-onto-appinn-dot-me</id>
    <content type="html"><![CDATA[<p>大概两个星期前，跟[小众软件][]申请了<a href="http://appinn.me">appinn.me</a>的域名——<a href="http://programus.appinn.me">programus.appinn.me</a>。</p>

<p>说起来有点对不住[小众][]，因为各种原因，一直没腾出时间去打点。今天终于抽出了点时间，去放了两个以前做的软件——</p>

<!--more-->


<ul>
<li><a href="http://programus.appinn.me/softwares/ptray/">PTray</a></li>
<li><a href="http://programus.appinn.me/softwares/screenruler/">ScreenRuler</a></li>
</ul>


<p>小众提供的模板还是不错的，不需要自己修改HTML，只要把对应的文件内容做下更改就行。不过，可惜这些对应的文件的扩展名是<code>.txt</code>，导致在里面编写<code>HTML</code>的时候无法代码高亮。
等再有时间的时候，研究一下如何改成<code>.html</code>扩展名的。</p>

<p>{% include links %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress追加数据表格的CSS]]></title>
    <link href="http://programus.github.com/blog/2012/03/07/add-table-data-css-for-octopress/"/>
    <updated>2012-03-07T21:56:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/07/add-table-data-css-for-octopress</id>
    <content type="html"><![CDATA[<p>昨天恢复了一个<a href="{%%20post_url%202010-11-15-tiny-countdown%20%}">旧博客</a>，里面包含了一个数据表格。</p>

<p>但[Octopress][]的默认表格是不具有边框的，在看数据表格时会很难看。</p>

<p>于是，对[Octopress][]做了一番剖析，追加了针对数据表格的CSS格式，并允许在博客的内容文件中选择是否使用数据表格。</p>

<!--more-->


<p>要做到这一点，首先得先找到原始CSS的所在，在Firefox中[Firebug][]的帮助下，很顺利地找到了位于<code>source/stylesheets</code>的<code>screen.css</code>文件。</p>

<p>打开一看，傻眼了。居然是紧凑型CSS，都堆在一起了。于是上网找了个CSS格式化工具——<a href="http://www.cssportal.com/online-css-editor/">http://www.cssportal.com/online-css-editor/</a>。</p>

<p>当CSS格式化后，查看了一下里面对<code>table</code>、<code>th</code>、<code>td</code>的格式定义。发现确实将<code>border-width</code>设置成了<code>0</code>。</p>

<p>看来只有覆盖它们了。于是写了一个<code>data-table.css</code>，同样放在<code>source/stylesheets</code>下面。</p>

<p>{% gist 1993032 data-table.css %}
（感谢<a href="http://chen.yanping.me/" title="陈堰平的个人网站">陈堰平</a>在评论中的指正，CSS文件修正了。修正详情在文章最后。）</p>

<p>然后找到引入<code>screen.css</code>的文件，在其后引入<code>data-table.css</code>。这个文件是<code>source/_includes/head.html</code>。但为了保证没有数据表格的博客还能继续使用原本的表格风格，在里面加了少许条件。</p>

<p>{% gist 1993032 head.html %}</p>

<p>这样，只要在博客文件的<a href="https://github.com/mojombo/jekyll/wiki/yaml-front-matter"><code>yaml front matter</code></a>部分里面加入<code>styles: [data-table]</code>，就可以让数据表格用的表格风格生效了。</p>

<p>要在博客里插入表格，则可以使用如下格式。</p>

<p>```
左对齐表头 | 中间对齐表头 | 右对齐表头
:----------|:------------:|----------:
左对齐数据 |中间对齐数据  |右对齐数据
第二行数据 |也是第二行    |还是第二行
懒得写了...|.....         |.....
长数据，以便看出表头的对齐|长数据，以便看出表头的对齐|长数据，以便看出表头的对齐</p>

<p>```
就会得到如下表格：</p>

<table>
<thead>
<tr>
<th align="left">左对齐表头 </th>
<th align="center"> 中间对齐表头 </th>
<th align="right"> 右对齐表头</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">左对齐数据 </td>
<td align="center">中间对齐数据  </td>
<td align="right">右对齐数据</td>
</tr>
<tr>
<td align="left">第二行数据 </td>
<td align="center">也是第二行    </td>
<td align="right">还是第二行</td>
</tr>
<tr>
<td align="left">懒得写了...</td>
<td align="center">.....         </td>
<td align="right">.....</td>
</tr>
<tr>
<td align="left">长数据，以便看出表头的对齐</td>
<td align="center">长数据，以便看出表头的对齐</td>
<td align="right">长数据，以便看出表头的对齐</td>
</tr>
</tbody>
</table>


<p>其中的左右对齐，取决于表头下面一行中的冒号的位置。</p>

<hr />

<h3>2012-03-19补充：</h3>

<p>感谢<a href="http://chen.yanping.me/" title="陈堰平的个人网站">陈堰平</a>的指正，之前的CSS会连同代码框都改掉。查看了一下HTML代码，发现代码框的代码有如下特点：</p>

<ul>
<li>嵌在<code>&lt;div class="highlight"&gt;</code>或<code>&lt;div class="gist-highlight"&gt;</code>中</li>
<li><code>&lt;td&gt;</code>标签有<code>code</code>或<code>gutter</code>这两个class</li>
<li><code>&lt;td&gt;</code>的子标签是<code>&lt;pre&gt;</code></li>
</ul>


<p>本想用以上中的某种来区分对待CSS，但CSS中不支持通过排除某class（CSS3中有了<code>:not()</code>，但CSS3未被全部浏览器支持）或指定父标签来进行选择。由于对CSS也不是很熟悉，所以重新有学习了一次CSS选择器相关的知识，其中发现一个<code>+</code>选择器，可以通过在同级出现的标签来指定。这时发现了代码框的又一个特点：</p>

<ul>
<li><code>&lt;table&gt;</code>标签是孤独的（没有兄弟节点）</li>
</ul>


<p>但数据表格必然是配合文章出现的，前后通常都会有些兄弟标签。（即使没有也可以自己追加一个空<code>&lt;span&gt;</code>或<code>&lt;div&gt;</code>来解决。）于是，使用<code>* + table</code>来做选择器选出非代码的表格——也就是数据表格——从而完成了数据表格特定CSS的实现。</p>

<p>{% include links %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress追加[分享到微博]按钮]]></title>
    <link href="http://programus.github.com/blog/2012/03/04/share-weibo-button/"/>
    <updated>2012-03-04T20:11:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/04/share-weibo-button</id>
    <content type="html"><![CDATA[<p>昨天加上了[微博][]的侧边栏。今天发现每篇微博下面还有一个<code>Tweet</code>按钮。还是那句话，在[墙][]后面，[Twitter][]用不到，所以[微博][]的分享按钮不可缺少。</p>

<!--more-->


<p>有了昨天的经验，今天也就没去网上查什么资料。直接去[新浪微博][]找到<a href="http://open.weibo.com/sharebutton" title="新浪微博分享按钮">分享按钮</a>的页面，生成一个按钮代码。</p>

<p>{% gist 1972564 %}</p>

<p>仔细看看生成的按钮，虽然上面写了一大堆JavaScript，但实际有用的就是最后一行<code>document.write('...')</code>里面的HTML代码。但这里HTML的主要部分都是用JavaScript生成的。于是祭出网页分析神器——[Firebug][]，直接分析<a href="http://open.weibo.com/sharebutton" title="新浪微博分享按钮">分享按钮</a>页面里例子的HTML代码。从中提取出如下URL（为了便于阅读，格式做了调整）——</p>

<p><code>
http://hits.sinajs.cn/A1/weiboshare.html?
  url=http%3A%2F%2Fopen.weibo.com%2Fsharebutton&amp;
  appkey=&amp;
  type=6&amp;
  ralateUid=1098907490&amp;
  language=zh_cn
</code></p>

<p>其中各个参数的意思，参看生成的JavaScript的注释，基本一目了然了。下一步，嵌入代码到博客下面的分享栏里。</p>

<p>经过一番查找，分享栏的代码存储在<code>source/_includes/post/sharing.html</code>中。果断加入代码：</p>

<p>{% gist 1972657 sharing.html %}</p>

<p>其中最后一行是自己调整了一下看着顺眼的格式。</p>

<p>同时要在<code>_config.yml</code>文件中加入<code>weibo_share</code>的设定。</p>

<p>{% gist 1972657 _config.yml %}</p>

<p>最后，为了更换主题时不会出问题，对<code>.theme/&lt;所用的主题名&gt;/source/_includes/post/sharing.html</code>也做了相应的修改。</p>

<p>最后，生成网页、启动服务器测试——</p>

<p><code>
rake generate
rake preview
</code></p>

<p>查看预览网页<a href="http://localhost:4000">http://localhost:4000</a>……<strong>按钮加入成功</strong>！</p>

<p>{% include links %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Octopress博客追加新浪微博侧栏]]></title>
    <link href="http://programus.github.com/blog/2012/03/03/add-weibo-sidebar-into-octopress/"/>
    <updated>2012-03-03T21:43:00+09:00</updated>
    <id>http://programus.github.com/blog/2012/03/03/add-weibo-sidebar-into-octopress</id>
    <content type="html"><![CDATA[<p>配置好了基于Octopress的博客后，发现其右侧边栏（位置自然根据主题会有不同）上有[Twitter][]等内容。因为[墙][]的原因，[Twitter][]始终使用起来不够方便，所以还是[新浪微博][]用的更多。于是，就想在博客里弄一个[微博][]的侧边栏。</p>

<!--more-->


<p>{% img left /images/posts/octopress-weibo.png  %}</p>

<h3>实现设想</h3>

<p>[微博][]本身提供了一个嵌入侧边栏的工具，叫<a href="http://weibo.com/tool/weiboshow" title="微博秀">微博秀</a>。于是便想是不是简单嵌入即可呢？</p>

<h3>其他尝试</h3>

<p>但对稍有点费劲的工作，当然首先是上网搜索一下是否有现成方案。果然找到了一篇文章——《<a href="http://blog.tingkun.com/blog/2011/11/05/xin-lang-wei-bo-ce-lan-widgetding-zhi-octopress/">新浪微博侧栏widget定制</a>》。</p>

<p>仔细查看了一下代码，发现作者好粗心，代码里居然没有用变量，而是把自己的用户名直接硬写进去了。另外，貌似只实现了<code>微博名片</code>和<code>关注按钮</code>。而且因为使用了[微博][]的JavaScript API，所以需要一个APP ID。</p>

<h3>回归</h3>

<p>我是懒人，不想搞得那么复杂。于是继续回到自己最初的方案——嵌入<a href="http://weibo.com/tool/weiboshow" title="微博秀">微博秀</a>。</p>

<p>先到<a href="http://weibo.com/tool/weiboshow" title="微博秀">微博秀</a>里面生成自己的微博秀嵌入代码。</p>

<p>```</p>

<iframe 
    width="100%" 
    height="550" 
    class="share_self"  
    frameborder="0" 
    scrolling="no" 
    src="http://widget.weibo.com/weiboshow/index.php?
        width=0&
        height=550&
        fansRow=1&
        ptype=1&
        speed=0&
        skin=2&
        isTitle=0&
        noborder=1&
        isWeibo=1&
        isFans=1&
        uid=1098907490&
        verifier=abd54ad9&
        dpc=1">
</iframe>


<p>```</p>

<p>仔细一看，其实就是一个大URL，尝试一下各种参数。最终写了一个<code>weibo.html</code>，放到了<code>source/_includes/asides</code>下面。貌似在<code>.theme/&lt;所用的主题名&gt;/source/_includes/asides</code>下面放着更好，因为切换主题时不会丢失。</p>

<p>{% gist 1966517 weibo.html %}</p>

<p>同时，在<code>_config.yml</code>中加入相关设定——</p>

<p>{% gist 1966517 _config.yml %}</p>

<p>其中的<code>weibo_uid</code>和<code>weibo_verifier</code>是从<a href="http://weibo.com/tool/weiboshow" title="微博秀">微博秀</a>生成的代码中取得的，其它则是显示设定。</p>

<p>至此，搞定了微博的嵌入。</p>

<p>{% include links %}</p>
]]></content>
  </entry>
  
</feed>
